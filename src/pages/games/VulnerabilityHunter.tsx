import React, { useState, useEffect, useCallback } from "react";
import GameLayout from "@/components/GameLayout";
import { Bug, Shield, AlertTriangle, CheckCircle, Target, Clock, Zap, FileText, Server, Database, Eye, EyeOff } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { toast } from "sonner";

interface Vulnerability {
    id: number;
    name: string;
    technicalDescription: string;
    codeContext: string;
    obfuscatedCode: string;
    type: 'sql' | 'xss' | 'buffer' | 'injection' | 'auth' | 'crypto' | 'config' | 'dos' | 'race' | 'logic';
    hiddenSeverity: 'critical' | 'high' | 'medium' | 'low';
    realCvssScore: number;
    exploitVector: string[];
    prerequisites: string[];
    mitigationSteps: string[];
    position: { x: number; y: number };
    discovered: boolean;
    analyzed: boolean;
    userSeverityGuess?: string;
    userCvssGuess?: number;
    userMitigation?: string;
    exploitAttempts: number;
    maxExploitAttempts: number;
    exploited: boolean;
    correctlyAnalyzed: boolean;
    timeToAutoExploit: number;
    falsePositive: boolean;
}

const complexVulnerabilityDatabase: Omit<Vulnerability, 'id' | 'position' | 'discovered' | 'analyzed' | 'userSeverityGuess' | 'userCvssGuess' | 'userMitigation' | 'exploitAttempts' | 'exploited' | 'correctlyAnalyzed' | 'timeToAutoExploit'>[] = [
    {
        name: "CVE-2024-XXXX",
        technicalDescription: "Memory corruption in custom malloc implementation during concurrent access patterns",
        codeContext: "Multi-threaded file processing service with custom memory management",
        obfuscatedCode: `void* custom_malloc(size_t sz) {
  static unsigned char heap[MAX_HEAP];
  static size_t offset = 0;
  // Thread safety?
  void* ptr = heap + offset;
  offset += sz;
  return ptr;
}`,
        type: 'race',
        hiddenSeverity: 'critical',
        realCvssScore: 9.1,
        exploitVector: ["Local access required", "Race condition exploitation", "Heap spray technique"],
        prerequisites: ["Multi-threaded environment", "Predictable memory layout", "Control over allocation timing"],
        mitigationSteps: ["Implement thread-safe memory allocation", "Add mutex synchronization", "Use standard malloc/free", "Implement ASLR"],
        maxExploitAttempts: 3,
        falsePositive: false
    },
    {
        name: "VULN-AUTH-001",
        technicalDescription: "Time-based authentication bypass through computational timing analysis",
        codeContext: "Enterprise login system with custom password verification",
        obfuscatedCode: `bool verify_password(const char* input, const char* stored) {
  if (strlen(input) != strlen(stored)) return false;
  for (int i = 0; i < strlen(stored); i++) {
    if (input[i] != stored[i]) {
      return false;  // Early return
    }
  }
  return true;
}`,
        type: 'crypto',
        hiddenSeverity: 'high',
        realCvssScore: 7.5,
        exploitVector: ["Network timing analysis", "Statistical attack", "Password enumeration"],
        prerequisites: ["Network access to login", "Timing measurement capability", "Statistical analysis tools"],
        mitigationSteps: ["Constant-time comparison", "Rate limiting", "Add artificial delays", "Use crypto_memcmp"],
        maxExploitAttempts: 5,
        falsePositive: false
    },
    {
        name: "LOGIC-BUG-007",
        technicalDescription: "Integer overflow in financial calculation leading to privilege escalation",
        codeContext: "E-commerce payment processing with credit system",
        obfuscatedCode: `int calculate_discount(int price, int discount_percent) {
  int discount = price * discount_percent / 100;
  int final_price = price - discount;
  if (final_price < 0) final_price = 0; // Safety check?
  return final_price;
}`,
        type: 'logic',
        hiddenSeverity: 'critical',
        realCvssScore: 8.9,
        exploitVector: ["Integer overflow manipulation", "Negative price exploitation", "Account credit manipulation"],
        prerequisites: ["Valid user account", "Access to purchase system", "Understanding of integer limits"],
        mitigationSteps: ["Input validation bounds", "Arbitrary precision arithmetic", "Overflow detection", "Business logic review"],
        maxExploitAttempts: 2,
        falsePositive: false
    },
    {
        name: "NET-PROTO-404",
        technicalDescription: "Custom protocol parser state machine confusion",
        codeContext: "Network service with proprietary binary protocol",
        obfuscatedCode: `enum state { INIT, AUTH, DATA, CLOSE };
int handle_packet(enum state* current, char* packet) {
  switch(*current) {
    case AUTH:
      if (packet[0] == 0x01) *current = DATA;
      break;
    case DATA:
      if (packet[0] == 0xFF) {
        *current = INIT; // Reset without cleanup
        process_data(packet + 1);
      }
      break;
  }
}`,
        type: 'buffer',
        hiddenSeverity: 'high',
        realCvssScore: 8.2,
        exploitVector: ["State confusion attack", "Protocol fuzzing", "Memory corruption"],
        prerequisites: ["Network access", "Protocol knowledge", "Fuzzing tools"],
        mitigationSteps: ["State machine validation", "Proper state cleanup", "Input sanitization", "Protocol specification review"],
        maxExploitAttempts: 4,
        falsePositive: false
    },
    {
        name: "DB-QUERY-503",
        technicalDescription: "Second-order SQL injection through stored procedure parameter",
        codeContext: "Data analytics platform with complex reporting queries",
        obfuscatedCode: `-- Stored procedure
CREATE PROCEDURE generate_report(@user_filter NVARCHAR(500))
AS
BEGIN
    DECLARE @sql NVARCHAR(1000)
    SET @sql = 'SELECT * FROM reports WHERE category IN (' + @user_filter + ')'
    EXEC sp_executesql @sql
END`,
        type: 'sql',
        hiddenSeverity: 'critical',
        realCvssScore: 9.3,
        exploitVector: ["Second-order injection", "Dynamic SQL construction", "Privilege escalation"],
        prerequisites: ["Valid user account", "Access to reporting", "SQL injection knowledge"],
        mitigationSteps: ["Parameterized queries", "Input validation", "Least privilege", "Query whitelisting"],
        maxExploitAttempts: 3,
        falsePositive: false
    },
    {
        name: "SAFE-CHECK-200",
        technicalDescription: "Bounds checking appears secure but contains edge case vulnerability",
        codeContext: "Image processing library with memory-safe operations",
        obfuscatedCode: `void process_image(unsigned char* buffer, size_t width, size_t height) {
  size_t total_pixels = width * height;
  if (total_pixels > MAX_PIXELS) return; // Bounds check
  
  for (size_t i = 0; i < total_pixels; i++) {
    buffer[i * 3] = apply_filter(buffer[i * 3]);     // R
    buffer[i * 3 + 1] = apply_filter(buffer[i * 3 + 1]); // G  
    buffer[i * 3 + 2] = apply_filter(buffer[i * 3 + 2]); // B
  }
}`,
        type: 'buffer',
        hiddenSeverity: 'low',
        realCvssScore: 4.2,
        exploitVector: ["Integer overflow in multiplication", "Buffer overflow", "Crafted image dimensions"],
        prerequisites: ["Malicious image file", "Large dimension values", "RGB format assumption"],
        mitigationSteps: ["Safe integer multiplication", "Buffer size validation", "Format verification"],
        maxExploitAttempts: 6,
        falsePositive: false
    },
    {
        name: "DECOY-VULN-999",
        technicalDescription: "Apparent SQL injection in deprecated debug endpoint",
        codeContext: "Legacy debug interface that appears vulnerable but is non-functional",
        obfuscatedCode: `// Debug endpoint - DISABLED IN PRODUCTION
void debug_query(char* user_input) {
    #ifdef DEBUG_MODE
    char query[1000];
    sprintf(query, "SELECT * FROM debug_info WHERE id = %s", user_input);
    // execute_query(query); // Commented out
    #endif
    return; // Always returns without execution
}`,
        type: 'sql',
        hiddenSeverity: 'low',
        realCvssScore: 0.0,
        exploitVector: ["False positive", "Non-exploitable code path", "Disabled functionality"],
        prerequisites: ["None - not exploitable"],
        mitigationSteps: ["Remove dead code", "Code cleanup"],
        maxExploitAttempts: 10,
        falsePositive: true
    },
    {
        name: "CRYPTO-IMPL-256",
        technicalDescription: "Custom cryptographic implementation with subtle mathematical weakness",
        codeContext: "Encryption library with proprietary algorithm",
        obfuscatedCode: `uint64_t custom_hash(const char* data, size_t len) {
  uint64_t hash = 0x1337DEADBEEF;
  for (size_t i = 0; i < len; i++) {
    hash = hash * 31 + data[i];  // Simple but flawed
    hash = hash ^ (hash >> 16);  // Weak diffusion
  }
  return hash;
}`,
        type: 'crypto',
        hiddenSeverity: 'medium',
        realCvssScore: 6.1,
        exploitVector: ["Hash collision attack", "Cryptographic weakness", "Algorithm analysis"],
        prerequisites: ["Cryptographic expertise", "Collision generation tools", "Mathematical analysis"],
        mitigationSteps: ["Use proven hash functions", "Cryptographic review", "Replace with SHA-256"],
        maxExploitAttempts: 7,
        falsePositive: false
    }
];

const VulnerabilityHunter = () => {
    const [score, setScore] = useState(0);
    const [gameStarted, setGameStarted] = useState(false);
    const [gameCompleted, setGameCompleted] = useState(false);
    const [timeLeft, setTimeLeft] = useState(600); // 10 minutes for complex analysis
    const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
    const [scanProgress, setScanProgress] = useState(0);
    const [isScanning, setIsScanning] = useState(false);
    const [selectedVuln, setSelectedVuln] = useState<Vulnerability | null>(null);
    const [showAnalysis, setShowAnalysis] = useState(false);
    const [analysisMode, setAnalysisMode] = useState<'severity' | 'cvss' | 'mitigation'>('severity');
    const [showCode, setShowCode] = useState(false);
    const [penaltyPoints, setPenaltyPoints] = useState(0);

    // Complex analysis state
    const [severityGuess, setSeverityGuess] = useState('');
    const [cvssGuess, setCvssGuess] = useState('');
    const [mitigationText, setMitigationText] = useState('');

    const generateVulnerabilities = useCallback(() => {
        const selected = complexVulnerabilityDatabase
            .sort(() => Math.random() - 0.5)
            .slice(0, 6);

        const vulns = selected.map((vuln, index) => ({
            ...vuln,
            id: index + 1,
            position: {
                x: Math.random() * 75 + 12.5,
                y: Math.random() * 60 + 20,
            },
            discovered: false,
            analyzed: false,
            exploitAttempts: 0,
            exploited: false,
            correctlyAnalyzed: false,
            timeToAutoExploit: vuln.hiddenSeverity === 'critical' ? 180 :
                vuln.hiddenSeverity === 'high' ? 240 : 300,
        }));
        setVulnerabilities(vulns);
    }, []);

    useEffect(() => {
        if (gameStarted && !gameCompleted && timeLeft > 0) {
            const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
            return () => clearTimeout(timer);
        } else if (timeLeft === 0) {
            endGame();
        }
    }, [timeLeft, gameStarted, gameCompleted]);

    // Auto-exploit timer
    useEffect(() => {
        if (gameStarted && !gameCompleted) {
            const interval = setInterval(() => {
                setVulnerabilities(prev =>
                    prev.map(vuln => {
                        if (vuln.discovered && !vuln.exploited && !vuln.correctlyAnalyzed && !vuln.falsePositive) {
                            const newTime = vuln.timeToAutoExploit - 1;
                            if (newTime <= 0) {
                                toast.error(`${vuln.name} has been exploited by threat actors!`);
                                setPenaltyPoints(p => p + vuln.realCvssScore * 10);
                                return { ...vuln, exploited: true, timeToAutoExploit: 0 };
                            }
                            return { ...vuln, timeToAutoExploit: newTime };
                        }
                        return vuln;
                    })
                );
            }, 1000);

            return () => clearInterval(interval);
        }
    }, [gameStarted, gameCompleted]);

    const startGame = () => {
        setGameStarted(true);
        setGameCompleted(false);
        setScore(0);
        setPenaltyPoints(0);
        setTimeLeft(600);
        setScanProgress(0);
        setIsScanning(false);
        setSelectedVuln(null);
        setShowAnalysis(false);
        generateVulnerabilities();
        toast.info("Advanced threat hunting initiated. Deploy sophisticated analysis techniques.");
    };

    const startAdvancedScan = () => {
        setIsScanning(true);
        setScanProgress(0);

        const scanInterval = setInterval(() => {
            setScanProgress(prev => {
                if (prev >= 100) {
                    clearInterval(scanInterval);
                    setIsScanning(false);

                    // Complex discovery algorithm - some vulnerabilities hidden
                    setVulnerabilities(prevVulns =>
                        prevVulns.map(vuln => ({
                            ...vuln,
                            discovered: Math.random() > (vuln.falsePositive ? 0.1 : 0.4) // False positives more likely to be found
                        }))
                    );

                    const discoveredCount = vulnerabilities.filter(v => v.discovered).length;
                    toast.success(`Scan complete. ${discoveredCount} potential threats detected. Begin manual analysis.`);
                    return 100;
                }
                return prev + 3;
            });
        }, 300);
    };

    const handleVulnerabilityClick = (vuln: Vulnerability) => {
        if (!vuln.discovered || vuln.exploited || vuln.correctlyAnalyzed) return;

        setSelectedVuln(vuln);
        setShowAnalysis(true);
        setShowCode(false);
        setAnalysisMode('severity');
        setSeverityGuess('');
        setCvssGuess('');
        setMitigationText('');
    };

    const submitAnalysis = () => {
        if (!selectedVuln) return;

        let correctness = 0;
        let points = 0;

        // Severity analysis
        if (severityGuess.toLowerCase() === selectedVuln.hiddenSeverity) {
            correctness += 1;
            points += 25;
        }

        // CVSS analysis (within 1.0 range)
        const cvssNum = parseFloat(cvssGuess);
        if (!isNaN(cvssNum) && Math.abs(cvssNum - selectedVuln.realCvssScore) <= 1.0) {
            correctness += 1;
            points += 35;
        }

        // Mitigation analysis (keyword matching)
        const userMit = mitigationText.toLowerCase();
        const requiredMitigations = selectedVuln.mitigationSteps.map(m => m.toLowerCase());
        const matchedMitigations = requiredMitigations.filter(mit =>
            mit.split(' ').some(word => userMit.includes(word))
        ).length;

        if (matchedMitigations >= requiredMitigations.length * 0.6) {
            correctness += 1;
            points += 40;
        }

        // Bonus for perfect analysis
        if (correctness === 3) {
            points += 50; // Perfect analysis bonus
        }

        // False positive detection bonus
        if (selectedVuln.falsePositive && severityGuess.toLowerCase().includes('false') ||
            severityGuess.toLowerCase().includes('none') || cvssNum === 0) {
            points += 75; // Major bonus for correctly identifying false positives
        }

        // Time bonus
        const timeBonus = Math.max(0, Math.floor(selectedVuln.timeToAutoExploit / 10));
        points += timeBonus;

        setScore(prevScore => prevScore + points);

        setVulnerabilities(prev =>
            prev.map(vuln =>
                vuln.id === selectedVuln.id
                    ? {
                        ...vuln,
                        analyzed: true,
                        correctlyAnalyzed: correctness >= 2,
                        userSeverityGuess: severityGuess,
                        userCvssGuess: cvssNum,
                        userMitigation: mitigationText
                    }
                    : vuln
            )
        );

        if (correctness === 3) {
            toast.success(`Perfect analysis! +${points} points (including ${timeBonus} time bonus)`);
        } else if (correctness >= 2) {
            toast.success(`Good analysis! +${points} points`);
        } else {
            toast.warning(`Incomplete analysis. +${points} points. Review your assessment.`);
        }

        setShowAnalysis(false);
        setSelectedVuln(null);
    };

    const endGame = () => {
        setGameCompleted(true);
        const finalScore = Math.max(0, score - penaltyPoints);
        setScore(finalScore);
    };

    const resetGame = () => {
        setGameStarted(false);
        setGameCompleted(false);
        setScore(0);
        setPenaltyPoints(0);
        setTimeLeft(600);
        setVulnerabilities([]);
        setScanProgress(0);
        setIsScanning(false);
        setSelectedVuln(null);
        setShowAnalysis(false);
    };

    const formatTime = (seconds: number) => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins}:${secs.toString().padStart(2, '0')}`;
    };

    const discoveredVulns = vulnerabilities.filter(v => v.discovered);
    const analyzedVulns = vulnerabilities.filter(v => v.analyzed);
    const exploitedVulns = vulnerabilities.filter(v => v.exploited);

    return (
        <GameLayout title="Vulnerability Hunter" score={score}>
            <div className="max-w-7xl mx-auto space-y-6">
                {/* Game Header */}
                <div className="text-center">
                    <Bug className="w-16 h-16 text-accent mx-auto mb-4" />
                    <h2 className="text-3xl font-cyber font-bold mb-2 text-accent">Expert Threat Analysis Platform</h2>
                    <p className="text-muted-foreground text-lg max-w-4xl mx-auto mb-6">
                        Conduct sophisticated vulnerability research requiring deep code analysis, CVSS scoring expertise, and advanced mitigation strategies. False positives and complex attack vectors challenge even expert analysts.
                    </p>
                </div>

                {/* Game Stats */}
                {gameStarted && (
                    <div className="grid grid-cols-2 md:grid-cols-6 gap-3 mb-6">
                        <Card className="glass-card p-3 text-center">
                            <Clock className="h-5 w-5 text-primary mx-auto mb-1" />
                            <div className={`text-lg font-cyber font-bold ${timeLeft < 120 ? 'text-destructive' : 'text-primary'}`}>
                                {formatTime(timeLeft)}
                            </div>
                            <div className="text-xs text-muted-foreground">Time</div>
                        </Card>
                        <Card className="glass-card p-3 text-center">
                            <Target className="h-5 w-5 text-accent mx-auto mb-1" />
                            <div className="text-lg font-cyber font-bold text-accent">{discoveredVulns.length}</div>
                            <div className="text-xs text-muted-foreground">Found</div>
                        </Card>
                        <Card className="glass-card p-3 text-center">
                            <FileText className="h-5 w-5 text-secondary mx-auto mb-1" />
                            <div className="text-lg font-cyber font-bold text-secondary">{analyzedVulns.length}</div>
                            <div className="text-xs text-muted-foreground">Analyzed</div>
                        </Card>
                        <Card className="glass-card p-3 text-center">
                            <AlertTriangle className="h-5 w-5 text-destructive mx-auto mb-1" />
                            <div className="text-lg font-cyber font-bold text-destructive">{exploitedVulns.length}</div>
                            <div className="text-xs text-muted-foreground">Exploited</div>
                        </Card>
                        <Card className="glass-card p-3 text-center">
                            <div className="text-lg font-cyber font-bold text-primary">{score}</div>
                            <div className="text-xs text-muted-foreground">Score</div>
                        </Card>
                        <Card className="glass-card p-3 text-center">
                            <div className="text-lg font-cyber font-bold text-destructive">-{penaltyPoints}</div>
                            <div className="text-xs text-muted-foreground">Penalty</div>
                        </Card>
                    </div>
                )}

                {/* Controls */}
                <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mb-6">
                    {!gameStarted ? (
                        <Button onClick={startGame} className="cyber-button flex items-center text-lg py-3 px-8">
                            <Target className="w-5 h-5 mr-2" />
                            Begin Expert Analysis
                        </Button>
                    ) : !isScanning && scanProgress === 0 ? (
                        <Button onClick={startAdvancedScan} className="cyber-button flex items-center">
                            <Bug className="w-4 h-4 mr-2" />
                            Deploy Advanced Scanners
                        </Button>
                    ) : isScanning ? (
                        <div className="flex items-center space-x-4">
                            <div className="text-accent font-cyber">Deep scanning in progress...</div>
                            <div className="w-64">
                                <Progress value={scanProgress} className="h-3" />
                            </div>
                            <div className="text-sm text-muted-foreground">{scanProgress}%</div>
                        </div>
                    ) : null}

                    <Button onClick={resetGame} variant="outline" className="border-accent/50 text-accent hover:bg-accent/10">
                        Reset Analysis
                    </Button>
                </div>

                {/* Vulnerability Visualization */}
                {gameStarted && scanProgress === 100 && (
                    <Card className="glass-card p-6">
                        <h3 className="font-cyber font-bold text-primary mb-4">
                            Attack Surface Analysis - Click Threats for Manual Review
                        </h3>
                        <div className="relative bg-gradient-to-br from-card/30 to-accent/5 rounded-lg h-[500px] border border-primary/20">
                            <div className="absolute top-4 left-4 text-xs text-muted-foreground">
                                Complex System Architecture - Expert Analysis Required
                            </div>

                            {vulnerabilities.map((vuln) => {
                                if (!vuln.discovered) return null;

                                return (
                                    <div
                                        key={vuln.id}
                                        className={`absolute cursor-pointer transition-all duration-500 ${vuln.analyzed
                                                ? vuln.correctlyAnalyzed
                                                    ? 'opacity-80'
                                                    : 'opacity-60'
                                                : vuln.exploited
                                                    ? 'animate-pulse opacity-90'
                                                    : 'hover:scale-125 animate-bounce'
                                            }`}
                                        style={{
                                            left: `${vuln.position.x}%`,
                                            top: `${vuln.position.y}%`,
                                            transform: 'translate(-50%, -50%)',
                                        }}
                                        onClick={() => handleVulnerabilityClick(vuln)}
                                    >
                                        <div className={`relative p-3 rounded-full border-3 ${vuln.analyzed
                                                ? vuln.correctlyAnalyzed
                                                    ? 'bg-secondary/30 border-secondary shadow-secondary/50'
                                                    : 'bg-yellow-500/30 border-yellow-500 shadow-yellow-500/50'
                                                : vuln.exploited
                                                    ? 'bg-destructive/40 border-destructive shadow-destructive/60 animate-pulse'
                                                    : 'bg-accent/30 border-accent shadow-accent/50 hover:bg-accent/50'
                                            } shadow-lg`}>
                                            <Bug className={`h-7 w-7 ${vuln.analyzed
                                                    ? vuln.correctlyAnalyzed
                                                        ? 'text-secondary'
                                                        : 'text-yellow-500'
                                                    : vuln.exploited
                                                        ? 'text-destructive'
                                                        : 'text-accent'
                                                }`} />

                                            {!vuln.analyzed && !vuln.exploited && (
                                                <div className="absolute -top-3 -right-3 bg-destructive text-white text-xs rounded-full w-8 h-8 flex items-center justify-center font-bold animate-pulse">
                                                    {Math.ceil(vuln.timeToAutoExploit / 60)}m
                                                </div>
                                            )}

                                            {vuln.analyzed && vuln.correctlyAnalyzed && (
                                                <CheckCircle className="absolute -top-2 -right-2 h-6 w-6 text-secondary bg-background rounded-full" />
                                            )}
                                        </div>

                                        <div className="absolute top-full left-1/2 transform -translate-x-1/2 mt-2 px-3 py-1 bg-background/95 rounded text-xs font-mono whitespace-nowrap border border-primary/20">
                                            {vuln.name}
                                        </div>
                                    </div>
                                );
                            })}
                        </div>
                    </Card>
                )}

                {/* Complex Analysis Modal */}
                {showAnalysis && selectedVuln && (
                    <div className="fixed inset-0 bg-background/90 backdrop-blur-sm flex items-center justify-center z-50 p-4">
                        <Card className="glass-card p-6 max-w-4xl w-full max-h-[90vh] overflow-y-auto">
                            <div className="space-y-6">
                                <div className="flex items-center justify-between">
                                    <h3 className="text-xl font-cyber font-bold text-accent">{selectedVuln.name}</h3>
                                    <div className="flex gap-2">
                                        <Button
                                            onClick={() => setShowCode(!showCode)}
                                            variant="outline"
                                            size="sm"
                                            className="border-primary/50"
                                        >
                                            {showCode ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                                            {showCode ? 'Hide Code' : 'Show Code'}
                                        </Button>
                                    </div>
                                </div>

                                <div className="grid md:grid-cols-2 gap-6">
                                    <div className="space-y-4">
                                        <div>
                                            <h4 className="font-semibold text-primary mb-2">Technical Analysis Required</h4>
                                            <p className="text-sm text-muted-foreground leading-relaxed">
                                                {selectedVuln.technicalDescription}
                                            </p>
                                        </div>

                                        <div>
                                            <h4 className="font-semibold text-primary mb-2">System Context</h4>
                                            <p className="text-sm text-secondary">{selectedVuln.codeContext}</p>
                                        </div>

                                        {showCode && (
                                            <div>
                                                <h4 className="font-semibold text-primary mb-2">Source Code Analysis</h4>
                                                <div className="bg-card/70 p-4 rounded font-mono text-xs border border-accent/20 overflow-x-auto">
                                                    <pre className="whitespace-pre-wrap">{selectedVuln.obfuscatedCode}</pre>
                                                </div>
                                            </div>
                                        )}
                                    </div>

                                    <div className="space-y-4">
                                        <div>
                                            <label className="font-semibold text-primary mb-2 block">
                                                Severity Assessment <span className="text-destructive">*</span>
                                            </label>
                                            <Input
                                                value={severityGuess}
                                                onChange={(e) => setSeverityGuess(e.target.value)}
                                                placeholder="critical, high, medium, low, false-positive"
                                                className="bg-card/50 border-primary/20"
                                            />
                                            <p className="text-xs text-muted-foreground mt-1">
                                                Analyze code carefully. Consider false positives.
                                            </p>
                                        </div>

                                        <div>
                                            <label className="font-semibold text-primary mb-2 block">
                                                CVSS v3.1 Score <span className="text-destructive">*</span>
                                            </label>
                                            <Input
                                                value={cvssGuess}
                                                onChange={(e) => setCvssGuess(e.target.value)}
                                                placeholder="0.0 - 10.0"
                                                type="number"
                                                step="0.1"
                                                min="0"
                                                max="10"
                                                className="bg-card/50 border-primary/20"
                                            />
                                            <p className="text-xs text-muted-foreground mt-1">
                                                Consider exploitability, impact, and scope.
                                            </p>
                                        </div>

                                        <div>
                                            <label className="font-semibold text-primary mb-2 block">
                                                Mitigation Strategy <span className="text-destructive">*</span>
                                            </label>
                                            <Textarea
                                                value={mitigationText}
                                                onChange={(e) => setMitigationText(e.target.value)}
                                                placeholder="Describe specific technical mitigations..."
                                                rows={4}
                                                className="bg-card/50 border-primary/20 resize-none"
                                            />
                                            <p className="text-xs text-muted-foreground mt-1">
                                                Provide concrete technical solutions, not generic advice.
                                            </p>
                                        </div>
                                    </div>
                                </div>

                                <div className="flex gap-3 pt-4 border-t border-primary/20">
                                    <Button
                                        onClick={submitAnalysis}
                                        disabled={!severityGuess || !cvssGuess || !mitigationText}
                                        className="cyber-button flex-1"
                                    >
                                        <Shield className="w-4 h-4 mr-2" />
                                        Submit Expert Analysis
                                    </Button>
                                    <Button
                                        onClick={() => setShowAnalysis(false)}
                                        variant="outline"
                                        className="border-muted"
                                    >
                                        Cancel
                                    </Button>
                                </div>
                            </div>
                        </Card>
                    </div>
                )}

                {/* Game Complete Modal */}
                {gameCompleted && (
                    <div className="fixed inset-0 bg-background/80 backdrop-blur-sm flex items-center justify-center z-50">
                        <Card className="glass-card p-8 max-w-lg mx-4">
                            <div className="text-center space-y-4">
                                <Bug className="w-16 h-16 text-accent mx-auto" />
                                <h3 className="text-2xl font-cyber font-bold text-accent">
                                    Expert Analysis Complete
                                </h3>
                                <div className="space-y-3">
                                    <p className="text-xl font-bold text-primary">
                                        Final Score: {score}
                                    </p>
                                    <div className="text-sm text-muted-foreground space-y-1 bg-card/30 p-4 rounded">
                                        <p>Threats Analyzed: {analyzedVulns.length}/{discoveredVulns.length}</p>
                                        <p>Correct Assessments: {vulnerabilities.filter(v => v.correctlyAnalyzed).length}</p>
                                        <p>Security Breaches: {exploitedVulns.length}</p>
                                        <p>Analysis Time: {formatTime(600 - timeLeft)}</p>
                                        {penaltyPoints > 0 && (
                                            <p className="text-destructive">Penalty Points: -{penaltyPoints}</p>
                                        )}
                                    </div>
                                </div>
                                <Button onClick={resetGame} className="cyber-button w-full">
                                    New Expert Assessment
                                </Button>
                            </div>
                        </Card>
                    </div>
                )}

                {/* Expert Instructions */}
                {!gameStarted && (
                    <Card className="glass-card p-8 max-w-4xl mx-auto">
                        <h3 className="text-xl font-cyber font-bold text-accent mb-6">
                            Expert-Level Vulnerability Research Protocol
                        </h3>
                        <div className="grid md:grid-cols-2 gap-8 text-sm">
                            <div className="space-y-4">
                                <div className="flex items-start space-x-3">
                                    <Target className="h-5 w-5 text-accent mt-0.5 flex-shrink-0" />
                                    <div>
                                        <p className="font-semibold">Advanced Code Analysis</p>
                                        <p className="text-muted-foreground">Review complex code patterns, identify subtle vulnerabilities, detect false positives</p>
                                    </div>
                                </div>
                                <div className="flex items-start space-x-3">
                                    <FileText className="h-5 w-5 text-primary mt-0.5 flex-shrink-0" />
                                    <div>
                                        <p className="font-semibold">CVSS Scoring</p>
                                        <p className="text-muted-foreground">Calculate accurate CVSS v3.1 scores based on exploitability and impact analysis</p>
                                    </div>
                                </div>
                            </div>
                            <div className="space-y-4">
                                <div className="flex items-start space-x-3">
                                    <Shield className="h-5 w-5 text-secondary mt-0.5 flex-shrink-0" />
                                    <div>
                                        <p className="font-semibold">Technical Mitigations</p>
                                        <p className="text-muted-foreground">Provide specific, implementable security solutions</p>
                                    </div>
                                </div>
                                <div className="flex items-start space-x-3">
                                    <AlertTriangle className="h-5 w-5 text-destructive mt-0.5 flex-shrink-0" />
                                    <div>
                                        <p className="font-semibold">Time-Critical Response</p>
                                        <p className="text-muted-foreground">Vulnerabilities auto-exploit - prioritize based on risk</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div className="bg-destructive/10 border border-destructive/30 rounded-lg p-4 mt-6">
                            <p className="text-sm text-destructive font-semibold mb-2">⚠️ Expert Challenge Mode</p>
                            <ul className="text-xs text-muted-foreground space-y-1">
                                <li>• Complex vulnerabilities require deep code analysis</li>
                                <li>• False positives mixed with real threats</li>
                                <li>• Accurate CVSS scoring essential for maximum points</li>
                                <li>• Technical mitigation knowledge required</li>
                                <li>• Auto-exploitation penalties for unaddressed critical threats</li>
                            </ul>
                        </div>
                    </Card>
                )}
            </div>
        </GameLayout>
    );
};

export default VulnerabilityHunter;
